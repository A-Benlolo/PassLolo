package window;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Base64;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.plaf.basic.BasicProgressBarUI;

import crypto.AES;
import crypto.Password;
import utilities.Files;

public class PasswordChange {
	// Styling
	private static final int WINDOW_WIDTH = 460;
	private static final int WINDOW_HEIGHT = 239;
	
	// Labels
	private static JLabel header;
	private static JLabel currentLabel;
	private static JLabel newLabel;
	private static JLabel confirmLabel;
	private static JLabel strengthLabel;
	
	// Editors
	private static JPasswordField currentField;
	private static JPasswordField newField;
	private static JPasswordField confirmField;
	private static JProgressBar strengthBar;
	
	// Buttons
	private static JButton currentReveal;
	private static JButton newReveal;
	private static JButton checkDictionary;
	
	// Tracker
	private static boolean userIsDone;
	private static boolean updatePassword;
	
	public static byte[] display(String path, char echoChar, boolean autoCheckDictionary) {
		// Initialize the tracker
		userIsDone = false;
		updatePassword = false;
		
		// The panel that contains the message
		GridBagLayout layout = new GridBagLayout();
		JPanel panel = new JPanel(layout);
		panel.setBackground(new Color(250, 250, 250));
		panel.setBorder(BorderFactory.createLineBorder(new Color(137, 140, 144), 1));
		
		// Add the header
		GridBagConstraints headerConstraints = new GridBagConstraints(0, 0, 3, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 5, 0), 0, 0);
		header = new JLabel("Master Password for "+path);
		panel.add(header, headerConstraints);
		
		// Add the current password row
		currentLabel = new JLabel();
		currentField = new JPasswordField();
		currentField.setEchoChar(echoChar);
		currentReveal = new JButton();
		addRow(panel, 1, "Current Password:", currentLabel, currentField, currentReveal);
		
		// Add the new password row
		newLabel = new JLabel();
		newField = new JPasswordField();
		newField.setEchoChar(echoChar);
		newReveal = new JButton();
		addRow(panel, 2, "New Password:", newLabel, newField, newReveal);
		
		// Add the confirm password row
		confirmLabel = new JLabel();
		confirmField = new JPasswordField();
		confirmField.setEchoChar(echoChar);
		addRow(panel, 3, "Confirm New Password:", confirmLabel, confirmField, null);
		
		
		
		// Add the strength bar to the new tab
		GridBagConstraints strengthBarConstraints = new GridBagConstraints(1, 4, 1, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0);
		strengthBar = new JProgressBar(0, 100);
		strengthBar.setMinimumSize(new Dimension(120, 20));
		strengthBar.setPreferredSize(new Dimension(120, 20));
		strengthBar.setStringPainted(true);
		strengthBar.setUI(new BasicProgressBarUI() {
			protected Color getSelectionBackground() { return Color.BLACK; }
			protected Color getSelectionForeground() { return Color.BLACK; }});
		strengthBar.setValue(0);
		panel.add(strengthBar, strengthBarConstraints);

		// Add the dictionary button
		GridBagConstraints dictionaryButtonConstraints = new GridBagConstraints(2, 4, 1, 1, 0, 0, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets(3, 3, 3, 3), 0, 0);
		checkDictionary = new JButton("Check Dictionary");
		checkDictionary.setPreferredSize(new Dimension(120, 20));
		checkDictionary.setEnabled(false);
		panel.add(checkDictionary, dictionaryButtonConstraints);
		
		
		
		
		// Add the reveal listeners
		currentReveal.addActionListener(toggleEchoChar(echoChar, currentReveal, currentField));
		newReveal.addActionListener(toggleEchoChar(echoChar, newReveal, newField, confirmField));
		
		// Create the option pane and dialog
		JOptionPane pane = new JOptionPane(panel, JOptionPane.PLAIN_MESSAGE, JOptionPane.DEFAULT_OPTION, null, new Object[] {"Accept", "Cancel"}, null);
		JDialog dialog = new JDialog(new JFrame(), "Change Master Password", true);
		dialog.setIconImage(new ImageIcon("..\\resources\\windowIcon.png").getImage());
		dialog.setContentPane(pane);
		dialog.setResizable(false);

		// Set the size
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		double screenWidth = screenSize.getWidth();
		double screenHeight = screenSize.getHeight();
		dialog.setBounds((int)screenWidth/2 - WINDOW_WIDTH/2, (int)screenHeight/2 - WINDOW_HEIGHT/2-50, WINDOW_WIDTH, WINDOW_HEIGHT);
		
		// Recursively unfocus everything in the dialog
		recursiveUnfocus(dialog);
		
		// Add the buttons pressed listener
		pane.addPropertyChangeListener(buttonPressed(dialog, path, autoCheckDictionary));
		dialog.addWindowListener(windowClosing(dialog));
		
		do {
			// Display the dialog
			dialog.setVisible(true);
			
			// Reset the value of the pane
			pane.setValue(null);
			
		} while(!userIsDone);
		
		if(updatePassword) {
			byte[] hashedKey = new byte[0];
			char[] chars = new char[0];
			String str = "";
			try {
				chars = newField.getPassword();
				str = new String(chars);
				hashedKey = AES.hashKey(str);
				return hashedKey;
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				for(int i = 0; i < chars.length; i++)
					chars[i] = '\0';
				for(int i = 0; i < hashedKey.length; i++)
					hashedKey[i] = '\0';
				str = null;
			}
		}
		return null;
	}

	/**
	 * Disable all children of root from being focusable.
	 * <p>
	 * Does not apply to components such as JTextField, which need focus to function.
	 * 
	 * @param root The starting component.
	 */
	private static void recursiveUnfocus(Component root) {
		if(root instanceof JCheckBox)
			((JCheckBox) root).setFocusPainted(false);
		else if(!(root instanceof JTextArea || root instanceof JComboBox || root instanceof JTextField))
			root.setFocusable(false);

		if(root instanceof Container) {
			Component[] children = ((Container) root).getComponents();
			for (Component child : children) {
				recursiveUnfocus(child);
			}
		}
	} 
	
	/**
	 * Add a row to a panel.
	 * 
	 * @param panel The panel to add the row to.
	 * @param row The row that this will be on the panel.
	 * @param text The label text for this row.
	 * @param label The label for this row.
	 * @param field The field for this row.
	 * @param button The button for this row. Not added if null.
	 */
	private static void addRow(JPanel panel, int row, String text, JLabel label, JPasswordField field, JButton button) {
		Insets insets = new Insets(5, 5, 5, 5);
		
		// Add the label
		GridBagConstraints labelContraints = new GridBagConstraints(0, row, 1, 1, 0, 0, GridBagConstraints.LINE_END, GridBagConstraints.NONE, insets, 0, 0);
		label.setText(text);
		panel.add(label, labelContraints);
		
		// Add the password field
		GridBagConstraints fieldConstraints = new GridBagConstraints(1, row, (button == null)? 3 : 2, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, insets, 0, 0);
		field.setPreferredSize((button == null)? new Dimension(250, 20) : new Dimension(230, 20));
		field.setMinimumSize((button == null)? new Dimension(250, 20) : new Dimension(230, 20));
		panel.add(field, fieldConstraints);
		
		// Add the button, if applicable
		if(button != null) {
			insets = new Insets(0, -29, 0, 0);
			GridBagConstraints buttonConstraints = new GridBagConstraints(3, row, 1, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, insets, 0, 0);
			button.setIcon(new ImageIcon("..\\resources\\reveal.png"));
			button.setMargin(new Insets(0, 0, 0, 0));
			button.setPreferredSize(new Dimension(22, 22));
			panel.add(button, buttonConstraints);
		}
	}

	/**
	 * Toggle a password field between for being masked.
	 * 
	 * @param mask The character to mask with.
	 * @param field The password fields to reveal or mask.
	 * 
	 * @return A MouseAdapter.
	 */
	private static ActionListener toggleEchoChar(char mask, JButton button, JPasswordField... fields) {
		return new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				for(int i = 0; i < fields.length; i++) {
					if(fields[i].getEchoChar() == mask) {
						fields[i].setEchoChar('\0');
						button.setIcon(new ImageIcon("..\\resources\\hide.png"));
					}
					else {
						fields[i].setEchoChar(mask);
						button.setIcon(new ImageIcon("..\\resources\\reveal.png"));
					}
				}
			}
		};
	}

	/**
	 * Process the input based on the button pressed for the dialog.
	 * 
	 * @param dialog The dialog to analyze.
	 * 
	 * @return A PropertyChangeListener.
	 */
	private static PropertyChangeListener buttonPressed(JDialog dialog, String filePath, boolean autoCheckDictionary) {
		return new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent pce) {
				// The user clicked accept
				if(pce.getNewValue() != null && pce.getNewValue().equals("Accept")) {
					
					// Generate the hash of the entered current password, and check for correctness
					char[] enteredPasswordChars = currentField.getPassword();
					String enteredPassword = new String(enteredPasswordChars);
					byte[] enteredHashBytes = new byte[0];
					try {
						enteredHashBytes = AES.hashKey(enteredPassword);
						AES.decrypt(Base64.getDecoder().decode(Files.read(filePath)[0]), enteredHashBytes);
					} catch(Exception e) {
						JOptionPane.showMessageDialog(null, "Current password incorrect", "Incorrect Credentials", JOptionPane.ERROR_MESSAGE);
						userIsDone = false;
						dialog.setVisible(false);
						return;
					} finally {
						for(int i = 0; i < enteredPasswordChars.length; i++) 
							enteredPasswordChars[i] = '\0';
						for(int i = 0; i < enteredHashBytes.length; i++)
							enteredHashBytes[i] = '\0';
						enteredPassword = null;
					}
					
					// Ensure all the new password fields are occupied and matching
					char[] newPasswordChars = newField.getPassword();
					char[] confirmPasswordChars = confirmField.getPassword();
					if(newPasswordChars.length == 0) {
						JOptionPane.showMessageDialog(null, "New password cannot be blank", "Incorrect Credentials", JOptionPane.ERROR_MESSAGE);
						userIsDone = false;
						dialog.setVisible(false);
						for(int i = 0; i < newPasswordChars.length; i++)
							newPasswordChars[i] = '\0';
						for(int i = 0; i < confirmPasswordChars.length; i++)
							confirmPasswordChars[i] = '\0';
						return;
					}
					
					if(newPasswordChars.length != confirmPasswordChars.length) {
						JOptionPane.showMessageDialog(null, "New password fields do not match", "Incorrect Credentials", JOptionPane.ERROR_MESSAGE);
						userIsDone = false;
						dialog.setVisible(false);
						for(int i = 0; i < newPasswordChars.length; i++)
							newPasswordChars[i] = '\0';
						for(int i = 0; i < confirmPasswordChars.length; i++)
							confirmPasswordChars[i] = '\0';
						return;
					}
					for(int i = 0; i < newPasswordChars.length; i++) {
						if(newPasswordChars[i] != confirmPasswordChars[i]) {
							JOptionPane.showMessageDialog(null, "New password fields do not match", "Incorrect Credentials", JOptionPane.ERROR_MESSAGE);
							userIsDone = false;
							dialog.setVisible(false);
							for(int j = 0; j < newPasswordChars.length; j++)
								newPasswordChars[j] = '\0';
							for(int j = 0; j < confirmPasswordChars.length; j++)
								confirmPasswordChars[j] = '\0';
							return;
						}
					}
					
					// Check to make sure the password is strong
					int confirm = 0;
					String newPassword = new String(newPasswordChars);
					String result = "";
					if(strengthBar.getValue() != 100) {
						confirm = JOptionPane.showConfirmDialog(null, "Password strength is not at 100%. Are you sure you want to continue?", "Weak Password Warning", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, new ImageIcon("..\\resources\\searchResults.png"));
						if(confirm == JOptionPane.NO_OPTION) {
							userIsDone = false;
							dialog.setVisible(false);
							for(int i = 0; i < newPasswordChars.length; i++)
								newPasswordChars[i] = '\0';
							for(int i = 0; i < confirmPasswordChars.length; i++)
								confirmPasswordChars[i] = '\0';
							newPassword = null;
							result  = null;
							return;
						}
					}
					
					if(autoCheckDictionary) {
						result = Password.checkDictionary(newPassword);
						// Warn the user if the dictionary came back with a result
						if(result != null) {
							// Of an exact match
							if(result.toLowerCase().equals(newPassword))
								confirm = JOptionPane.showConfirmDialog(null, "An exact match of this password was found in a dictionary. Are you sure you want to continue?", "Weak Password Warning", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, new ImageIcon("..\\resources\\searchResults.png"));
							// Of a similar match
							else
								confirm = JOptionPane.showConfirmDialog(null, "A similar match of this password was found in a dictionary: \""+result+".\" Are you sure you want to continue?", "Weak Password Warning", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, new ImageIcon("..\\resources\\searchResults.png"));
	
							if(confirm == JOptionPane.NO_OPTION) {
								userIsDone = false;
								dialog.setVisible(false);
								for(int i = 0; i < newPasswordChars.length; i++)
									newPasswordChars[i] = '\0';
								for(int i = 0; i < confirmPasswordChars.length; i++)
									confirmPasswordChars[i] = '\0';
								newPassword = null;
								result  = null;
								return;
							}
						}
					}
					
					// Wipe the sensitive data
					for(int i = 0; i < newPasswordChars.length; i++)
						newPasswordChars[i] = '\0';
					for(int i = 0; i < confirmPasswordChars.length; i++)
						confirmPasswordChars[i] = '\0';
					newPassword = null;
					result  = null;
					
					userIsDone = true;
					updatePassword = true;
				}
				
				// The user wants to cancel
				else if(pce.getNewValue() != null && pce.getNewValue().equals("Cancel")) {
					userIsDone = true;
					updatePassword = false;
				}
				dialog.setVisible(false);
			}
		};
	}

	/**
	 * Close the dialog.
	 * 
	 * @param dialog The dialog.
	 * 
	 * @return A WindowAdapter.
	 */
	private static WindowAdapter windowClosing(JDialog dialog) {
		return new WindowAdapter() {
			public void windowClosing(WindowEvent we) {
				userIsDone = true;
				updatePassword = false;
				dialog.setVisible(false);
			}
		};
	}
}
